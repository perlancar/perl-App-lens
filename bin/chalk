#!perl

# DATE
# VERSION

# IFUNBUILT
use strict;
# END IFUNBUILT

my %CODES = (
    reset         => "\e[0m",
    bold          => "\e[1m",
    dim           => "\e[2m",
    italic        => "\e[3m",
    underline     => "\e[4m",
    inverse       => "\e[7m",
    hidden        => "\e[8m",
    strikethrough => "\e[9m",

    black   => "\e[30m",
    red     => "\e[31m",
    green   => "\e[32m",
    yellow  => "\e[33m",
    blue    => "\e[34m",
    magenta => "\e[35m",
    cyan    => "\e[36m",
    white   => "\e[37m",
    gray    => "\e[37m",

    bgBlack   => "\e[40m",
    bgRed     => "\e[41m",
    bgGreen   => "\e[42m",
    bgYellow  => "\e[43m",
    bgBlue    => "\e[44m",
    bgMagenta => "\e[45m",
    bgCyan    => "\e[46m",
    bgWhite   => "\e[47m",
);

sub parse_styles {
    my $ansi = "";
    my $bold;
    for (@_) {
        $CODES{$_} or die "Invalid style: $_\n";
        $ansi .= $CODES{$_};
    }
    $ansi;
}

require Win32::Console::ANSI if $^O eq 'MSWin32';

my $in_interactive  = (-t STDIN);
my $out_interactive = (-t STDOUT);

if (grep {$_ eq '--help'} @ARGV) {
    print <<'EOF';
chalk - Colorize text for terminal output

Usage:
  % chalk <style> ... <string>
  % echo <string> | chalk <style> ...

Example:
  % chalk red bold 'Unicorns & Rainbows'

EOF
    exit 0;
} elsif ($in_interactive) {
    die "Input required\n" unless @ARGV >= 2;
    my $string = pop @ARGV;
    my $ansi = parse_styles(@ARGV);
    print $ansi         if $out_interactive;
    print $string;
    print $CODES{reset} if $out_interactive;
    print "\n";
} else {
    die "Input required\n" unless @ARGV >= 1;
    my $ansi = parse_styles(@ARGV);
    while (<STDIN>) {
        chomp;
        print $ansi         if $out_interactive;
        print;
        print $CODES{reset} if $out_interactive;
        print "\n";
    }
}

1;
# ABSTRACT: Colorize text for terminal output
# PODNAME: chalk

=head1 SYNOPSIS

Usage:

 % chalk <style> ... <string>
 % echo <string> | chalk <style> ...

Example:

 % chalk red bold 'Unicorns & Rainbows'


=head1 DESCRIPTION

This is a Perl port of node.js' chalk-cli utility
(L<https://www.npmjs.com/package/chalk-cli>). This Perl port is basically the
same as the node.js' version, but with a smaller startup overhead.


=head1 FAQ

=head2 What are the supported styles?

Modifiers:

    reset
    bold
    dim
    italic (not widely supported)
    underline
    inverse
    hidden
    strikethrough (not widely supported)

Colors:

    black
    red
    green
    yellow
    blue
    magenta
    cyan
    white
    gray

Background colors:

    bgBlack
    bgRed
    bgGreen
    bgYellow
    bgBlue
    bgMagenta
    bgCyan
    bgWhite

=head2 What about the library version of chalk?

We already have L<Term::ANSIColor> in Perl. Use that.


=head1 SEE ALSO

L<Term::ANSIColor>

L<https://www.npmjs.com/package/chalk>

L<https://www.npmjs.com/package/chalk-cli>
